#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <Arduino.h> // For millis

// Define a struct to hold commands and delays
struct Command {
    char device[20];
    char command[50];
    unsigned long executeTime; // Time when the command should be executed
    bool hasRun;
};

// Store commands in a global array
Command commands[50];
int commandCount = 0;

// Function to parse the command sequence and store commands with their execute times
void parseCommands(const char* sequence) {
    char* seqCopy = strdup(sequence);  // Create a copy of the sequence to avoid modifying the original
    char* token = strtok(seqCopy, ";");
    char currentDevice[20] = "";
    unsigned long currentTime = millis();
    unsigned long cumulativeDelay = 0;

    while (token != NULL) {
        char* greaterPos = strchr(token, '>');
        if (greaterPos != NULL) {
            // It's a device command
            *greaterPos = '\0';  // Null-terminate the device name
            strcpy(currentDevice, token);
            cumulativeDelay = 0;
            token = greaterPos + 1;
            continue;
        }
        if (token[0] == '#') {
            // It's a delay
            unsigned long delay = strtoul(token + 1, NULL, 10);
            cumulativeDelay += delay;
        } else {
            // It's a simple or panel instruction
            commands[commandCount] = {0};
            strcpy(commands[commandCount].device, currentDevice);
            strcpy(commands[commandCount].command, token);
            commands[commandCount].executeTime = currentTime + cumulativeDelay;
            commands[commandCount].hasRun = false;
            commandCount++;
        }
        token = strtok(NULL, ";");
    }

    free(seqCopy);  // Free the duplicated sequence
}

// Function to execute commands at the proper times
void executeCommands() {
    unsigned long currentTime = millis();
    int currentCommandIndex = 0;

    while (currentCommandIndex < commandCount) {
        if (!commands[currentCommandIndex].hasRun &&
            (currentTime >= commands[currentCommandIndex].executeTime)) {
            commands[currentCommandIndex].hasRun = true;
            Serial.print("Sending command to ");
            Serial.print(commands[currentCommandIndex].device);
            Serial.print(": ");
            Serial.print(commands[currentCommandIndex].command);
            Serial.print(" at time: ");
            Serial.println(currentTime);
            // Replace this with actual command sending logic
        }
        currentCommandIndex++;
    }
}

void setup() {
    Serial.begin(115200);

    const char* sequences[] = {
        "device1>:TURN_ON;#1000;*SET_TEMP 22;^5,10;device3>FOO;#2000;BAR",
        "device2>START;#2000;STOP"
    };

    for (int i = 0; i < sizeof(sequences) / sizeof(sequences[0]); ++i) {
        parseCommands(sequences[i]);
    }
}

void loop() {
    // Call executeCommands periodically to process commands
    executeCommands();
    delay(10);  // Adjust delay as needed for your application
}
